# Use the official Node.js image from the Docker Hub
# Stage 1: Build Angular App with Node.js image(Debian-based)
FROM node:18-bullseye-slim AS build-frontend

# Set the working directory in the container
WORKDIR /usr/local/app/frontend

# Copy the package.json and package-lock.json files
COPY frontend/package*.json ./

# Install only production dependencies to keep the image lean
RUN npm install --production

# Copy the rest of the frontend application files
COPY frontend/ .

# Build the Angular app with production configuration
RUN npx ng build --configuration production

##############################################################

# Stage 3: Serve with Nginx (Debian-based)
FROM nginx:latest
WORKDIR /usr/share/nginx/html

# Copy built Angular app from the first stage to Nginx's web directory
COPY --from=build-frontend /usr/local/app/frontend/dist/personal-web/browser /usr/share/nginx/html

# Copy the custom Nginx configuration file
COPY frontend/default.conf /etc/nginx/conf.d/default.conf

#update and install vim
RUN apt update && apt install -y vim && apt-get install -y gunicorn

# Expose port 80 for web traffic
EXPOSE 80

RUN ln -s /usr/bin/python3 /usr/bin/python

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]